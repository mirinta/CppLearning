@startuml

abstract class ShapeVisitor {
  + virtual ~ShapeVisitor()
  + virtual void visit(const Circle&) const
  + virtual void visit(const Square&) const
}

abstract class Shape {
  + virtual ~Shape()
  + virtual void accept(const ShapeVisitor&) const
}

class Circle {
  + void accept(const ShapeVisitor&) const
}

class Square {
  + void accept(const ShapeVisitor&)
}

class ShapeSerializer {
  + void visit(const Circle&) const
  + void visit(const Square&) const
}

class ShapeRender {
  + void visit(const Circle&) const
  + void visit(const Square&) const
}

Shape <|-- Circle
Shape <|-- Square

ShapeVisitor <|-- ShapeSerializer
ShapeVisitor <|-- ShapeRender

Shape ..> ShapeVisitor
ShapeVisitor ..> Circle
ShapeVisitor ..> Square

note left of Circle::accept
    v->visit(this)
end note

note right of Square::accept
    v->visit(this)
end note

@enduml
